#!rsc
# RouterOS script: check-routeros-update
# Copyright (c) 2013-2019 Christian Hesse <mail@eworm.de>
#
# change to stand alone version
# check for RouterOS update, send notification and/or install

# enter your Email address below
:local EmailTo "example@example.com";

:local Identity [ / system identity get name ];

# url encoding
:local UrlEncode do={
  :local Input [ :tostr $1 ];
  :local Return "";

  :if ([ :len $Input ] > 0) do={
    :local Chars " !\"#\$%&'()*+,-./:;<=>\?@[\\]^_`{|}~";
    :local Subs { "%20"; "%21"; "%22"; "%23"; "%24"; "%25"; "%26"; "%27"; "%28"; "%29";
                  "%2A"; "%2B"; "%2C"; "%2D"; "%2E"; "%2F"; "%3A"; "%3B"; "%3C"; "%3D";
                  "%3E"; "%3F"; "%40"; "%5B"; "%5C"; "%5D"; "%5E"; "%5F"; "%60"; "%7B";
                  "%7C"; "%7D"; "%7E" };

    :for I from=0 to=([ :len $Input ] - 1) do={
      :local Char [ :pick $Input $I ];
      :local Replace [ :find $Chars $Char ];

      :if ([ :len $Replace ] > 0) do={
        :set Char ($Subs->$Replace);
      }
      :set Return ($Return . $Char);
    }
  }
  :return $Return;
}

# send notification via e-mail
:local SendNotification do={
  :local Subject [ :tostr $1 ];
  :local Message [ :tostr $2 ];
  :local Attach [ :tostr $3 ];

  :local UrlEncode;

    :do {
      / tool e-mail send to=$EmailTo \
        subject=("[" . $Identity . "] " . $Subject) body=$Message file=$Attach;
    } on-error={
      :log warning "Failed sending notification mail!";
    }
} 

# main script check for ros updates
:local Update do={
  :if ([ / system script print count-only where name="packages-update" ] > 0) do={
    / system script run packages-update;
  } else={
    / system package update install without-paging;
  }
  :error "Waiting for system to reboot.";
}

:if ([ / system package print count-only where name="wireless" disabled=no ] > 0) do={
  :if ([ / interface wireless cap get enabled ] = true && \
      [ / caps-man manager get enabled ] = false) do={
    :log warning "System is managed by CAPsMAN, not checking.";
    :error "Warning: See log for details.";
  }
}

/ system package update check-for-updates without-paging;
:local InstalledVersion [ / system package update get installed-version ];
:local LatestVersion [ / system package update get latest-version ];

:if ($InstalledVersion != $LatestVersion) do={
  :local Channel [ / system package update get channel ];
  :local BoardName [ / system resource get board-name ];
  :local Model [ / system routerboard get model ];
  :local SerialNumber [ / system routerboard get serial-number ];
  }

  :if ([ / system script job print count-only where script="check-routeros-update" parent~"." ] > 0) do={
    :put ("Do you want to install RouterOS version " . $LatestVersion . "? [y/N]");
    :if ([ :terminal inkey timeout=60 ] = 121) do={
      $Update;
    } else={
      :put "Canceled...";
    }
  }

  $SendNotification ("RouterOS update") \
    ("There is a RouterOS update available.\n\n" . \
      "Board name:    " . $BoardName . "\n" . \
      "Model:         " . $Model . "\n" . \
      "Serial number: " . $SerialNumber . "\n" . \
      "Hostname:      " . $Identity . "\n" . \
      "Channel:       " . $Channel . "\n" . \
      "Installed:     " . $InstalledVersion . "\n" . \
      "Available:     " . $LatestVersion . "\n\n" .\
      "https://mikrotik.com/download/changelogs/" . $Channel . "-release-tree");
}
