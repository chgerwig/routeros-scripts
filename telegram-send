:local Identity [ / system identity get name ];
:local TelegramTokenId "12343545";
:local TelegramChatId "324324234";


# url encoding
:local UrlEncode do={
  :local Input [ :tostr $1 ];
  :local Return "";

  :if ([ :len $Input ] > 0) do={
    :local Chars " !\"#\$%&'()*+,-./:;<=>\?@[\\]^_`{|}~";
    :local Subs { "%20"; "%21"; "%22"; "%23"; "%24"; "%25"; "%26"; "%27"; "%28"; "%29";
                  "%2A"; "%2B"; "%2C"; "%2D"; "%2E"; "%2F"; "%3A"; "%3B"; "%3C"; "%3D";
                  "%3E"; "%3F"; "%40"; "%5B"; "%5C"; "%5D"; "%5E"; "%5F"; "%60"; "%7B";
                  "%7C"; "%7D"; "%7E" };

    :for I from=0 to=([ :len $Input ] - 1) do={
      :local Char [ :pick $Input $I ];
      :local Replace [ :find $Chars $Char ];

      :if ([ :len $Replace ] > 0) do={
        :set Char ($Subs->$Replace);
      }
      :set Return ($Return . $Char);
    }
  }

  :return $Return;
}

# check and import required certificates
:local CertificateAvailable do={
  :local CommonName [ :tostr $1 ];

  :global ScriptUpdatesBaseUrl;
  :global ScriptUpdatesUrlSuffix;

  :global WaitForFile;

  :if ([ / certificate print count-only where common-name=$CommonName ] = 0) do={
    :log info ("Certificate with CommonName " . $CommonName . \
      " not available, downloading and importing.");
    :do {
      :local LocalFileName ($CommonName . ".pem");
      :local UrlFileName ([ $UrlEncode $CommonName ] . ".pem");
      / tool fetch check-certificate=yes-without-crl \
        ($ScriptUpdatesBaseUrl . "certs/" . \
        $UrlFileName . $ScriptUpdatesUrlSuffix) \
        dst-path=$LocalFileName;
      $WaitForFile $LocalFileName;
      / certificate import file-name=$LocalFileName passphrase="";
      / file remove $LocalFileName;
    } on-error={
      :log warning "Failed imprting certificate!";
    }
  }
}

# send notification via telegram
:set SendTelegram do={
  :local Subject [ :tostr $1 ];
  :local Message [ :tostr $2 ];
  :local Silent  [ :tostr $3 ];

  :local UrlEncode;

  :local ChatId $TelegramChatId;
  :if ([ :len $TelegramChatIdOverride ] > 0) do={
    :set ChatId $TelegramChatIdOverride;
  }

  :if ([ :len $TelegramTokenId ] = 0 || [ :len $ChatId ] = 0) do={
    :return;
  }

  $CertificateAvailable "Go Daddy Secure Certificate Authority - G2";
  :do {
    / tool fetch check-certificate=yes-without-crl output=none http-method=post \
      ("https://api.telegram.org/bot" . $TelegramTokenId . "/sendMessage") \
      http-data=("chat_id=" . $ChatId . "&disable_notification=" . $Silent . \
      "&text=" . [ $UrlEncode ("[" . $Identity . "] " . $Subject . "\n\n" . $Message) ]);
  } on-error={
    :log warning "Failed sending telegram notification!";
  }
}

$SendTelegram();
