#!rsc
# RouterOS script: collect-wireless-mac.local
# Copyright (c) 2013-2019 Christian Hesse <mail@eworm.de>
#
# collect wireless mac adresses in access list
# modified to run as stand alone script without notification

:local Identity [ / system identity get name ];

# get MAC vendor
:local GetMacVendor do={
  :local Mac [ :tostr $1 ];

  :do {
    :local Vendor;
    :set Vendor ([ / tool fetch check-certificate=yes-without-crl \
        ("https://api.macvendors.com/" . [ :pick $Mac 0 8 ]) output=user as-value ]->"data");
    :return $Vendor;
  } on-error={
    :return "unknown vendor";
  }
}

:local PlaceBefore [ / interface wireless access-list find where comment="--- collected above ---" disabled ];
:if ([ :len $PlaceBefore ] = 0) do={
  :log error "Missing disabled access-list entry with comment '--- collected above ---'";
  :error "Error: See log for details.";
}

:foreach RegTbl in=[ / interface wireless registration-table find ] do={
  :local Mac [ / interface wireless registration-table get $RegTbl mac-address ];
  :local AccessList ([ / interface wireless access-list find where mac-address=$Mac ]->0);
  :if ([ :len $AccessList ] = 0) do={
    :local HostName "no dhcp lease";
    :local Address "no dhcp lease";
    :local Lease [ / ip dhcp-server lease find where mac-address=$Mac ];
    :if ([ :len $Lease ] > 0) do={
      :set HostName [ / ip dhcp-server lease get $Lease host-name ];
      :set Address [ / ip dhcp-server lease get $Lease address ];
    }
    :if ([ :len $HostName ] = 0) do={
      :set HostName "no hostname";
    }
    :if ([ :len $Address ] = 0) do={
      :set Address "no address";
    }
    :local RegEntry [ / interface wireless registration-table find where mac-address=$Mac ];
    :local Interface [ / interface wireless registration-table get $RegEntry interface ];
    :local Ssid [ / interface wireless get [ find where name=$Interface ] ssid ];
    :local DateTime ([ / system clock get date ] . " " . [ / system clock get time ]);
    :local Vendor [ $GetMacVendor $Mac ];
    :local Message ("unknown MAC address " . $Mac . " (" . $Vendor . ", " . $HostName . ") " . \
      "first seen on " . $DateTime . " connected to SSID " . $Ssid . ", interface " . $Interface);
    / log info $Message;
    / interface wireless access-list add place-before=$PlaceBefore comment=$Message mac-address=$Mac disabled=yes;
  } else={
    :local Comment [ / interface wireless access-list get $AccessList comment ];
    :log debug ("MAC address " . $Mac . " already known: " . $Comment);
  }
}
